<?xml version="1.0"?>
<doc>
<assembly>
<name>
My_GL
</name>
</assembly>
<members>
<member name="T:My_GL.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:My_GL.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:My_GL.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:My_GL.AxisGeometry.GetVertexLayout">
 <summary>
 X = 2 vertices, Y = 2 vertices, Z = 2 vertices
 </summary>
 <returns></returns>
</member>
<member name="M:My_GL.BoxGeometry.GetVertexLayout">
 <summary>
 X = number of points per face, Y = number of stacks, Z = number of faces.
 </summary>
 <returns></returns>
</member>
<member name="M:My_GL.CylinderLineGeometry.#ctor(System.Double)">
 <summary>
 Creates a new Cylinder.
 </summary>
 <param name="Diameter">Outer diameter of the cylinder.</param>
</member>
<member name="M:My_GL.CylinderLineGeometry.#ctor(System.Double,System.Int32)">
 <summary>
 Creates a new Cylinder.
 </summary>
 <param name="Diameter">Outer diameter of the cylinder.</param>
 <param name="slices">Each stack is divides into slices</param>
</member>
<member name="M:My_GL.CylinderLineGeometry.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double,System.Int32)">
 <summary>
 Creates a new full Cylinder with diameter 1 and height 1.
 </summary>
 <param name="StartPt">The center of cylinderline Bottom surface</param>
 <param name="EndPt">The center of cylinderline Top surface</param>
 <param name="Diameter">Outer diameter of the cylinder.</param>
 <param name="slices">Each stack is divides into slices</param>
</member>
<member name="M:My_GL.CylinderLineGeometry.GetVertexLayout">
 <summary>
 X = number of vertices per stack, Y = number of stacks, Z = 0
 </summary>
 <returns></returns>
</member>
<member name="M:My_GL.FixedCamera.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
 <summary>
 A Fixed camera can not be changed at all.
 </summary>
 <param name="position">The camera will always stay at this position.</param>
 <param name="targetPosition">The camera will always look at this target position.</param>
 <param name="up">The Up direction determines the roll angle of the camera. It can not be changed.</param>
</member>
<member name="M:My_GL.FixedCamera.Vertical(System.Double)">
 <summary>
 Not implemented for a Fixed Camera
 </summary>
</member>
<member name="M:My_GL.FixedCamera.Horizontal(System.Double)">
 <summary>
 Not implemented for a Fixed Camera
 </summary>
</member>
<member name="M:My_GL.FixedCamera.Forward(System.Double)">
 <summary>
 Not implemented for a Fixed Camera
 </summary>
</member>
<member name="M:My_GL.FreeFlyingCamera.#ctor">
 <summary>
 A FreeFlying Camera rotates around its position and moves along its view direction
 </summary>
</member>
<member name="M:My_GL.FreeFlyingCamera.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
 <summary>
 A FreeFlying Camera rotates around its position and moves along its view direction
 </summary>
</member>
<member name="M:My_GL.ColorPalette.#ctor">
 <summary>
 Creates a new empty ColorPalette.
 Use LoadPalette to read the colors from a .CPL file.
 </summary>
</member>
<member name="M:My_GL.ColorPalette.#ctor(System.String)">
 <summary>
 Creates a ColorPalette from a .CPL file.
 Each line in the file must have R;G;B format (R, G, B = 0-255)
 </summary>
</member>
<member name="M:My_GL.ColorPalette.LoadPalette(System.String)">
 <summary>
 Read the color data from a .CPL file.
 Each line in the file must have R;G;B format (R, G, B = 0-255).
 </summary>
</member>
<member name="M:My_GL.ColorPalette.Rainbow(System.Int32)">
 <summary>
 Creates a List(of Color) filled with the rainbow colors (Purple to Red).
 </summary>
</member>
<member name="M:My_GL.ConeGeometry.#ctor(System.Double,System.Double,System.Double)">
 <summary>
 Creates a new Default Cone
 </summary>
 <param name="Top_Diameter">Allows to create a knotted cone.</param>
 <param name="Bottom_Diameter">Diameter of the Cone base.</param>
 <param name="Height">Height of the cone.</param>
</member>
<member name="M:My_GL.ConeGeometry.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Int32)">
 <summary>
 Creates a new Cone
 </summary>
 <param name="Top_Diameter">Allows to create a knotted cone.</param>
 <param name="Bottom_Diameter">Diameter of the Cone base.</param>
 <param name="Height">Height of the cone.</param>
 <param name="stacks">The geometry is divided into horizontal stacks</param>
 <param name="slices">Each stack is divides into slices</param>
</member>
<member name="M:My_GL.ConeGeometry.#ctor(System.Int32,System.Int32)">
 <summary>
 Creates a new Cone with base diameter 1 and height 1
 </summary>
 <param name="stacks">The geometry is divided into horizontal stacks</param>
 <param name="slices">Each stack is divides into slices</param>
</member>
<member name="M:My_GL.ConeGeometry.GetVertexLayout">
 <summary>
 X = number of vertices per stack, Y = number of stacks, Z = 2 (center points of first and Last stack).
 </summary>
 <returns></returns>
</member>
<member name="M:My_GL.CylinderGeometry.#ctor(System.Double,System.Double)">
 <summary>
 Creates a new Cylinder.
 </summary>
 <param name="Diameter">Outer diameter of the cylinder.</param>
 <param name="Height">Height of the cylinder.</param>
</member>
<member name="M:My_GL.CylinderGeometry.#ctor(System.Double,System.Double,System.Int32,System.Int32)">
 <summary>
 Creates a new Cylinder.
 </summary>
 <param name="Diameter">Outer diameter of the cylinder.</param>
 <param name="Height">Height of the cylinder.</param>
 <param name="stacks">The geometry is divided into horizontal stacks</param>
 <param name="slices">Each stack is divides into slices</param>
</member>
<member name="M:My_GL.CylinderGeometry.#ctor(System.Int32,System.Int32)">
 <summary>
 Creates a new full Cylinder with diameter 1 and height 1.
 </summary>
 <param name="stacks">The geometry is divided into horizontal stacks</param>
 <param name="slices">Each stack is divides into slices</param>
</member>
<member name="M:My_GL.CylinderGeometry.GetVertexLayout">
 <summary>
 X = number of vertices per stack, Y = number of stacks, Z = 0
 </summary>
 <returns></returns>
</member>
<member name="M:My_GL.DodecahedronGeometry.GetVertexLayout">
 <summary>
 X = number of vertices per face, Y = number of stacks, Z = number of faces.
 </summary>
</member>
<member name="M:My_GL.EllipsoidGeometry.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Int32)">
 <summary>
 Create a new Ellipsoid
 </summary>
 <param name="stacks">The geometry is divided into horizontal stacks</param>
 <param name="slices">Each stack is divides into slices</param>
</member>
<member name="M:My_GL.EllipsoidGeometry.#ctor(System.Int32,System.Int32)">
 <summary>
 Create a new Ellipsoid with size 1 along all axes (= sphere)
 </summary>
 <param name="stacks">The geometry is divided into horizontal stacks</param>
 <param name="slices">Each stack is divides into slices</param>
</member>
<member name="M:My_GL.EllipsoidGeometry.GetVertexLayout">
 <summary>
 X = number of vertices per stack, Y = number of stacks, Z = 0
 </summary>
 <returns></returns>
</member>
<member name="P:My_GL.GLGeometry.Position">
 <summary>
 Initial position of the center of the geometry.
 </summary>
 <returns></returns>
</member>
<member name="P:My_GL.GLGeometry.InitialRotationAxis">
 <summary>
 Initial Rotation of the geometry. Specify in degrees around axis X, Y and Z.
 </summary>
 <returns></returns>
</member>
<member name="P:My_GL.GLGeometry.RotationAngle">
 <summary>
 Angle of rotation animation around the RotationAxis
 </summary>
 <returns></returns>
</member>
<member name="P:My_GL.GLGeometry.RotationSpeed">
 <summary>
 Variation of the Rotation angle per frame.
 </summary>
 <returns></returns>
</member>
<member name="P:My_GL.GLGeometry.RotationAxis">
 <summary>
 Axis of Rotation specify location of axis X, Y and Z.
 </summary>
 <returns></returns>
</member>
<member name="M:My_GL.GLGeometry.GenerateGeometry(My_GL.GLScene)">
 <summary>
 This creates a VertexBufferArray object That holds the state of all of the
 vertex buffer operations.
 </summary>
</member>
<member name="M:My_GL.GLGeometry.Draw(SharpGL.Shaders.ShaderProgram)">
 <summary>
 Draws the geometry by using Vertex and Fragment Shaders
 </summary>
 <param name="shader">A compiled and linked ShaderProgram</param>
</member>
<member name="M:My_GL.GLGeometry.CalculateRotationMatrix(System.Double,System.Double,System.Double)">
 <summary>
 Calculate a Matrix that performs the rotation around the X, Y and Z axes.
 </summary>
 <param name="x">Rotation around the X-axis in degrees</param>
 <param name="y">Rotation around the Y-axis in degrees></param>
 <param name="z">>Rotation around the Z-axis in degrees</param>
 <returns></returns>
</member>
<member name="M:My_GL.GLGeometry.SetVertexColors(System.String,System.Int32)">
 <summary>
 Specify the color of each Vertex.
 If number of colors in ColorList is less than the number of Vertices the colors will wrap.
 </summary>
 <param name="palettefile">*.cpl file made by ColorGradient.exe</param>
 <param name="colorcount">Number of colors to use from the palette.</param>
</member>
<member name="M:My_GL.GLGeometry.GetVertexLayout">
 <summary>
 Returns the number of vertices in X, Y and Z directions.
 This allows to set the color per vertex or per vertex group in X, Y and Z axis.
 </summary>
 <returns></returns>
</member>
<member name="T:My_GL.GLScene">
<summary>
GLScene
</summary>
</member>
<member name="M:My_GL.GLScene.AddGeometry(My_GL.GLGeometry)">
 <summary>
 Adds a geometry description to the Scene. 
 <para>All the geometries in the scene are re-created at the next render pass.</para>
 </summary>
 <param name="geo">A geometry to be added to the scene</param>
</member>
<member name="M:My_GL.GLScene.GenerateGeometries">
 <summary>
 Creates the actual geometry objects that are in the scene.
 <para>This is called automatic at the next render pass after adding a geometry to the scene.</para>
 </summary>
</member>
<member name="M:My_GL.GLScene.UpdateGeometries">
 <summary>
 Updates the position and the rotation of all the geometries in the scene.
 </summary>
</member>
<member name="M:My_GL.GLScene.ClearGeometries">
 <summary>
 Removes all Geometries from the scene (except the axes if they are set).
 </summary>
</member>
<member name="M:My_GL.GLScene.AddLight(My_GL.GLLight)">
 <summary>
 Adds a Light to the scene.
 <para>All the Lights parameters are set on the fragment shader at the next render pass.</para>
 </summary>
 <param name="light"></param>
</member>
<member name="M:My_GL.GLScene.UpdateLights">
 <summary>
 Sets all the Lights parameters on the fragment shader.
 <para>This is called automatic at the next render pass after adding a Light to the scene.</para>
 </summary>
</member>
<member name="M:My_GL.GLScene.SetShaders(System.String,System.String)">
 <summary>
 Loads the Shader files into memmory.
 <para>The ProgramShader is created at the next render pass.</para>
 <para>This replaces the default Shaders used by the GLScene.</para>
 </summary>
 <param name="VertexShaderFile">Path of the Vertex Shader file.</param>
 <param name="FragmentShaderFile">Path of the Fragment Shader file.</param>
</member>
<member name="M:My_GL.GLScene.UpdateShaders">
 <summary>
 Creates the ShaderProgram
 <para>This is called automatic at the next render pass after setting Shaders.</para>
 </summary>
</member>
<member name="M:My_GL.GLScene.Render">
 <summary>
 Renders the scene. This must be called from the Parent window in a draw loop.
 </summary>
</member>
<member name="M:My_GL.GLScene.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="M:My_GL.GridGeometry.GetVertexLayout">
 <summary>
 X , Y and Z = 2 vertices per line
 </summary>
 <returns></returns>
</member>
<member name="M:My_GL.IcosahedronGeometry.GetVertexLayout">
 <summary>
 X = number of vertices per face, Y = number of stacks, Z = number of faces.
 </summary>
</member>
<member name="F:My_GL.LightType.NoLight">
 <summary>
 The socket is Empty
 </summary>
</member>
<member name="F:My_GL.LightType.DirectionalLight">
 <summary>
 e.g. A beam of sunlight
 </summary>
</member>
<member name="F:My_GL.LightType.PointLight">
 <summary>
 e.g. A light bulb
 </summary>
</member>
<member name="F:My_GL.LightType.SpotLight">
 <summary>
 e.g. A halogen spot
 </summary>
</member>
<member name="M:My_GL.LineGeometry.GetVertexLayout">
 <summary>
 X = 0, Y = 2 vertices, Z = 0
 </summary>
 <returns></returns>
</member>
<member name="M:My_GL.MeshGeometry.GetVertexLayout">
 <summary>
 X = number of points along X-axis, Y = 1, Z = number of points along Z-axis.
 </summary>
 <returns></returns>
</member>
<member name="M:My_GL.PolyLineGeometry.GetVertexLayout">
 <summary>
 X = 0, Y = number of Vertices , Z = 2 (2nd till 2nd last point have double Vertices)
 </summary>
 <returns></returns>
</member>
<member name="M:My_GL.PolylineRotationGeometry.#ctor">
 <summary>
 Creates a new empty PolylineRotation.
 </summary>
</member>
<member name="M:My_GL.PolylineRotationGeometry.#ctor(System.Double,System.Double,System.Double)">
 <summary>
 Creates a new empty PolylineRotation
 </summary>
 <param name="X_Size">The PolylineRotation is scaled to this size along the X-Axis.</param>
 <param name="Y_Size">The PolylineRotation is scaled to this size along the Y-Axis.</param>
 <param name="Z_Size">The PolylineRotation is scaled to this size along the Z-Axis.</param>
</member>
<member name="M:My_GL.PolylineRotationGeometry.#ctor(System.Collections.Generic.List{System.Windows.Point},System.Int32)">
 <summary>
 Creates a new PolylineRotation.
 </summary>
 <param name="points">The 2D Points that form the PolyLine that is rotated around the Y-axis. 
 The geometry is devided into horizontal stacks for each point of the polyline.</param>
 <param name="slices">Each stack is divides into slices</param>
</member>
<member name="M:My_GL.PolylineRotationGeometry.#ctor(System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Windows.Point})">
 <summary>
 Creates a new Default PolylineRotation
 </summary>
 <param name="X_Size">The PolylineRotation is scaled to this size along the X-Axis.</param>
 <param name="Y_Size">The PolylineRotation is scaled to this size along the Y-Axis.</param>
 <param name="Z_Size">The PolylineRotation is scaled to this size along the Z-Axis.</param>
 <param name="points">The 2D Points that form the PolyLine that is rotated around the Y-axis. 
 The geometry is devided into horizontal stacks for each point of the polyline.</param>
</member>
<member name="M:My_GL.PolylineRotationGeometry.#ctor(System.Double,System.Double,System.Double,System.Collections.Generic.List{System.Windows.Point},System.Int32,System.Int32)">
 <summary>
 Creates a new PolylineRotation.
 </summary>
 <param name="X_Size">The PolylineRotation is scaled to this size along the X-Axis.</param>
 <param name="Y_Size">The PolylineRotation is scaled to this size along the Y-Axis.</param>
 <param name="Z_Size">The PolylineRotation is scaled to this size along the Z-Axis.</param>
 <param name="points">The 2D Points that form the PolyLine that is rotated around the Y-axis. 
 The geometry is devided into horizontal stacks for each point of the polyline.</param>
 <param name="slices">Each stack is divides into slices</param>
</member>
<member name="M:My_GL.PolylineRotationGeometry.GetVertexLayout">
 <summary>
 X = number of vertices per stack, Y = number of stacks, Z = 2 (2nd till 2nd last Stack have double vertices)
 </summary>
 <returns></returns>
</member>
<member name="M:My_GL.STL_ImportGeometry.GetVertexLayout">
 <summary>
 X = number of vertices with normal along the X-axis
 Y = number of vertices with normal along the Y-axis
 Z = number of vertices with normal along the Z-axis    
 Use YZIndices, XZIndices, XYIndices to get the vertex indices
 Use the individual Vertex data to determine the relative positions of these vertices.
 </summary>
 <returns></returns>
</member>
<member name="M:My_GL.TextGeometry.GetVertexLayout">
 <summary>
 The text is rendered on a rectangle: X = 2 vertices; Y = 2 vertices
 </summary>
 <returns></returns>
</member>
<member name="M:My_GL.TorusGeometry.#ctor(System.Int32,System.Int32)">
 <summary>
 Creates a new Torus.
 </summary>
 <param name="stacks">The geometry is divided into horizontal stacks</param>
 <param name="slices">Each stack is divides into slices</param>
</member>
<member name="M:My_GL.TorusGeometry.#ctor(System.Double,System.Double,System.Int32,System.Int32)">
 <summary>
 Creates a new Torus.
 </summary>
 <param name="Diameter">The diameter of the Torus ring</param>
 <param name="size">The diameter of the Torusring centerline.</param>
 <param name="stacks">The geometry is divided into horizontal stacks</param>
 <param name="slices">Each stack is divides into slices</param>
</member>
<member name="M:My_GL.TorusGeometry.GetVertexLayout">
 <summary>
 X = number of vertices per stack, Y = number of stacks, Z = 0
 </summary>
 <returns></returns>
</member>
<member name="M:My_GL.TrackballCamera.#ctor">
 <summary>
 A Trackball Camera rotates around a targetposition and always looks at that position
 </summary>
</member>
<member name="M:My_GL.TrackballCamera.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
 <summary>
 A Trackball Camera rotates around a targetposition and always looks at that position
 </summary>
</member>
<member name="M:My_GL.TrefoilKnotGeometry.#ctor(System.Int32,System.Int32)">
 <summary>
 Creates a new default TrefoilKnot.
 </summary>
 <param name="stacks">The geometry is divided into horizontal stacks</param>
 <param name="slices">Each stack is divides into slices</param>
</member>
<member name="M:My_GL.TrefoilKnotGeometry.#ctor(System.Double,System.Double,System.Int32,System.Int32)">
 <summary>
 Creates a new TrefoilKnot.
 </summary>
 <param name="Diameter">The diameter of the tube that forms the trefoilknot.</param>
 <param name="size">The size of the trefoilknot (X, Y and Z sizes are scaled equal)</param>
 <param name="stacks">The geometry is divided into horizontal stacks</param>
 <param name="slices">Each stack is divides into slices</param>
</member>
<member name="M:My_GL.TrefoilKnotGeometry.GetVertexLayout">
 <summary>
 X = number of vertices per stack, Y = number of stacks, Z = 0
 </summary>
 <returns></returns>
</member>
<member name="M:My_GL.ParentControlledCamera.#ctor">
 <summary>
 This Camera's Position, TargetPosition and ViewDirection must be controlled by the Parent window.
 </summary>
</member>
<member name="M:My_GL.ParentControlledCamera.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
 <summary>
 This Camera's Position, TargetPosition and ViewDirection must be controlled by the Parent window.
 </summary>
</member>
<member name="M:My_GL.ParentControlledCamera.Vertical(System.Double)">
 <summary>
 Not implemented for a ParentControlled Camera
 </summary>
</member>
<member name="M:My_GL.ParentControlledCamera.Horizontal(System.Double)">
 <summary>
 Not implemented for a ParentControlled Camera
 </summary>
</member>
<member name="M:My_GL.ParentControlledCamera.Forward(System.Double)">
 <summary>
 Not implemented for a ParentControlled Camera
 </summary>
</member>
<member name="M:My_GL.ParentControlledCamera.UpdateDirection">
 <summary>
 Not implemented for a ParentControlled Camera
 </summary>
</member>
<member name="M:My_GL.ParentControlledCamera.UpdatePosition">
 <summary>
 Not implemented for a ParentControlled Camera
 </summary>
</member>
<member name="M:My_GL.TubeGeometry.#ctor(System.Double,System.Double,System.Double)">
 <summary>
 Creates a new Tube.
 </summary>
 <param name="WallThickness">The wall thickness of the Tube.</param>
 <param name="Outer_Diameter">Outer diameter of the Tube.</param>
 <param name="Length">Length of the Tube.</param>
</member>
<member name="M:My_GL.TubeGeometry.#ctor(System.Double,System.Double,System.Double,System.Int32,System.Int32)">
 <summary>
 Creates a new Cylinder.
 </summary>
 <param name="WallThickness">Allows creating a hollow cylinder.</param>
 <param name="Outer_Diameter">Outer diameter of the cylinder.</param>
 <param name="Height">Height of the cylinder.</param>
 <param name="stacks">The geometry is divided into horizontal stacks</param>
 <param name="slices">Each stack is divides into slices</param>
</member>
<member name="M:My_GL.TubeGeometry.#ctor(System.Int32,System.Int32)">
 <summary>
 Creates a new full Cylinder with diameter 1 and height 1.
 </summary>
 <param name="stacks">The geometry is divided into horizontal stacks</param>
 <param name="slices">Each stack is divides into slices</param>
</member>
<member name="M:My_GL.TubeGeometry.GetVertexLayout">
 <summary>
 X = number of vertices per stack, Y = number of stacks, Z = 0
 </summary>
 <returns></returns>
</member>
<member name="M:My_GL.UserGeometry.#ctor">
 <summary>
 Creates a new UserGeometry.  Useage: Add the Vertices one by one or as a list(of Vector3D)
 <para>Normals and texture coordinates should be added for each Vertex.</para>
 <para>If no Indices are added they will be used per Vertex.</para>
 <para>If no normals are added they are set by default as Vector(0,0,1).</para>
 <para>If no texture coordinates are set they are calculated over XY, XZ and YZ planes.</para>
 </summary>
</member>
<member name="M:My_GL.UserGeometry.AddTriangle(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
 <summary>
 Add a Triangle by specifiying Vertices V1-V2-V3 is counter-clockwise direction.
 Calculates the normal and adds that normal for each Vertex.
 </summary>
</member>
<member name="M:My_GL.UserGeometry.GetVertexLayout">
 <summary>
 This is defined by the user.
 </summary>
 <returns></returns>
</member>
</members>
</doc>

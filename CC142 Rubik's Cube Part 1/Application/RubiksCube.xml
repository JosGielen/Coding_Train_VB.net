<?xml version="1.0"?>
<doc>
<assembly>
<name>
RubiksCube
</name>
</assembly>
<members>
<member name="T:RubiksCube.My.MyWpfExtension">
 <summary>
 Module used to define the properties that are available in the My Namespace for WPF
 </summary>
 <remarks></remarks>
</member>
<member name="P:RubiksCube.My.MyWpfExtension.Application">
 <summary>
 Returns the application object for the running application
 </summary>
</member>
<member name="P:RubiksCube.My.MyWpfExtension.Computer">
 <summary>
 Returns information about the host computer.
 </summary>
</member>
<member name="P:RubiksCube.My.MyWpfExtension.User">
 <summary>
 Returns information for the current user.  If you wish to run the application with the current 
 Windows user credentials, call My.User.InitializeWithWindowsUser().
 </summary>
</member>
<member name="P:RubiksCube.My.MyWpfExtension.Log">
 <summary>
 Returns the application log. The listeners can be configured by the application's configuration file.
 </summary>
</member>
<member name="P:RubiksCube.My.MyWpfExtension.Windows">
 <summary>
 Returns the collection of Windows defined in the project.
 </summary>
</member>
<member name="T:RubiksCube.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:RubiksCube.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:RubiksCube.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="M:RubiksCube.Cubelet.GetVertexLayout">
 <summary>
 X = number of points per face, Y = number of stacks, Z = number of faces.
 </summary>
 <returns></returns>
</member>
<member name="M:RubiksCube.TextGeometry.GetVertexLayout">
 <summary>
 The text is rendered on a rectangle: X = 2 vertices; Y = 2 vertices
 </summary>
 <returns></returns>
</member>
<member name="M:RubiksCube.TrackballCamera.#ctor">
 <summary>
 A Trackball Camera rotates around a targetposition and always looks at that position
 </summary>
</member>
<member name="M:RubiksCube.TrackballCamera.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
 <summary>
 A Trackball Camera rotates around a targetposition and always looks at that position
 </summary>
</member>
<member name="T:RubiksCube.Application">
<summary>
Application
</summary>
</member>
<member name="M:RubiksCube.Application.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="M:RubiksCube.Application.Main">
<summary>
Application Entry Point.
</summary>
</member>
<member name="M:RubiksCube.AxisGeometry.GetVertexLayout">
 <summary>
 X = 2 vertices, Y = 2 vertices, Z = 2 vertices
 </summary>
 <returns></returns>
</member>
<member name="P:RubiksCube.GLGeometry.Position">
 <summary>
 Initial position of the center of the geometry.
 </summary>
 <returns></returns>
</member>
<member name="P:RubiksCube.GLGeometry.InitialRotationAxis">
 <summary>
 Initial Rotation of the geometry. Specify in degrees around axis X, Y and Z.
 </summary>
 <returns></returns>
</member>
<member name="P:RubiksCube.GLGeometry.Rotation">
 <summary>
 Angle of rotation around the X,Y,Z Axis in degrees.
 </summary>
 <returns></returns>
</member>
<member name="P:RubiksCube.GLGeometry.RotationSpeed">
 <summary>
 Speed of the Rotation around the X,Y,Z Axis in degrees per frame.
 </summary>
 <returns></returns>
</member>
<member name="M:RubiksCube.GLGeometry.GenerateGeometry(RubiksCube.GLScene)">
 <summary>
 This creates a VertexBufferArray object That holds the state of all of the
 vertex buffer operations.
 </summary>
</member>
<member name="M:RubiksCube.GLGeometry.Draw(SharpGL.Shaders.ShaderProgram)">
 <summary>
 Draws the geometry by using Vertex and Fragment Shaders
 </summary>
 <param name="shader">A compiled and linked ShaderProgram</param>
</member>
<member name="M:RubiksCube.GLGeometry.CalculateRotationMatrix(System.Double,System.Double,System.Double)">
 <summary>
 Calculate a Matrix that performs the rotation around the X, Y and Z axes.
 </summary>
 <param name="x">Rotation around the X-axis in degrees</param>
 <param name="y">Rotation around the Y-axis in degrees></param>
 <param name="z">>Rotation around the Z-axis in degrees</param>
 <returns></returns>
</member>
<member name="M:RubiksCube.GLGeometry.SetVertexColors(System.Collections.Generic.List{System.Windows.Media.Color})">
 <summary>
 Specify the color of each Vertex.
 If number of colors in ColorList is less than the number of Vertices the colors will wrap.
 </summary>
 <param name="colorList">A list of colors</param>
</member>
<member name="M:RubiksCube.GLGeometry.GetVertexLayout">
 <summary>
 Returns the number of vertices in X, Y and Z directions.
 This allows to set the color per vertex or per vertex group in X, Y and Z axis.
 </summary>
 <returns></returns>
</member>
<member name="F:RubiksCube.LightType.NoLight">
 <summary>
 The socket is Empty
 </summary>
</member>
<member name="F:RubiksCube.LightType.DirectionalLight">
 <summary>
 e.g. A beam of sunlight
 </summary>
</member>
<member name="F:RubiksCube.LightType.PointLight">
 <summary>
 e.g. A light bulb
 </summary>
</member>
<member name="F:RubiksCube.LightType.SpotLight">
 <summary>
 e.g. A halogen spot
 </summary>
</member>
<member name="T:RubiksCube.GLScene">
<summary>
GLScene
</summary>
</member>
<member name="M:RubiksCube.GLScene.AddGeometry(RubiksCube.GLGeometry)">
 <summary>
 Adds a geometry description to the Scene. 
 <para>All the geometries in the scene are re-created at the next render pass.</para>
 </summary>
 <param name="geo">A geometry to be added to the scene</param>
</member>
<member name="M:RubiksCube.GLScene.GenerateGeometries">
 <summary>
 Creates the actual geometry objects that are in the scene.
 <para>This is called automatic at the next render pass after adding a geometry to the scene.</para>
 </summary>
</member>
<member name="M:RubiksCube.GLScene.ClearGeometries">
 <summary>
 Removes all Geometries from the scene (except the axes if they are set).
 </summary>
</member>
<member name="M:RubiksCube.GLScene.AddLight(RubiksCube.GLLight)">
 <summary>
 Adds a Light to the scene.
 <para>All the Lights parameters are set on the fragment shader at the next render pass.</para>
 </summary>
 <param name="light"></param>
</member>
<member name="M:RubiksCube.GLScene.UpdateLights">
 <summary>
 Sets all the Lights parameters on the fragment shader.
 <para>This is called automatic at the next render pass after adding a Light to the scene.</para>
 </summary>
</member>
<member name="M:RubiksCube.GLScene.SetShaders(System.String,System.String)">
 <summary>
 Loads the Shader files into memmory.
 <para>The ProgramShader is created at the next render pass.</para>
 <para>This replaces the default Shaders used by the GLScene.</para>
 </summary>
 <param name="VertexShaderFile">Path of the Vertex Shader file.</param>
 <param name="FragmentShaderFile">Path of the Fragment Shader file.</param>
</member>
<member name="M:RubiksCube.GLScene.UpdateShaders">
 <summary>
 Creates the ShaderProgram
 <para>This is called automatic at the next render pass after setting Shaders.</para>
 </summary>
</member>
<member name="M:RubiksCube.GLScene.Render">
 <summary>
 Renders the scene. This must be called from the Parent window in a draw loop.
 </summary>
</member>
<member name="M:RubiksCube.GLScene.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="M:RubiksCube.GridGeometry.GetVertexLayout">
 <summary>
 X , Y and Z = 2 vertices per line
 </summary>
 <returns></returns>
</member>
<member name="T:RubiksCube.MainWindow">
<summary>
MainWindow
</summary>
</member>
<member name="M:RubiksCube.MainWindow.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:RubiksCube.XamlGeneratedNamespace.GeneratedInternalTypeHelper">
<summary>
GeneratedInternalTypeHelper
</summary>
</member>
<member name="M:RubiksCube.XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
<summary>
CreateInstance
</summary>
</member>
<member name="M:RubiksCube.XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
<summary>
GetPropertyValue
</summary>
</member>
<member name="M:RubiksCube.XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
<summary>
SetPropertyValue
</summary>
</member>
<member name="M:RubiksCube.XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
<summary>
CreateDelegate
</summary>
</member>
<member name="M:RubiksCube.XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
<summary>
AddEventHandler
</summary>
</member>
</members>
</doc>
